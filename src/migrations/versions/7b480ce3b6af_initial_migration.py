"""Initial migration.

Revision ID: 7b480ce3b6af
Revises:
Create Date: 2022-09-21 10:19:43.413135

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '7b480ce3b6af'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'permissions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('create_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('is_deleted', sa.Boolean(), nullable=False),
        sa.Column('protected', sa.Boolean(), nullable=False),
        sa.Column('name', sa.String(length=150), nullable=False),
        sa.Column('code', sa.INTEGER(), nullable=False),
        sa.Column('description', sa.String(length=150), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        sa.UniqueConstraint('name'),
        schema='auth',
    )
    op.create_index(op.f('ix_auth_permissions_code'), 'permissions', ['code'], unique=True, schema='auth')
    op.create_table(
        'roles',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('create_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('is_deleted', sa.Boolean(), nullable=False),
        sa.Column('protected', sa.Boolean(), nullable=False),
        sa.Column('name', sa.String(length=150), nullable=False),
        sa.Column('description', sa.String(length=150), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        schema='auth',
    )
    op.create_index(op.f('ix_auth_roles_name'), 'roles', ['name'], unique=True, schema='auth')
    op.create_table(
        'users',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('create_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('is_deleted', sa.Boolean(), nullable=False),
        sa.Column('username', sa.String(length=150), nullable=False),
        sa.Column('password', sa.String(length=150), nullable=False),
        sa.Column('email', sa.String(length=150), nullable=False),
        sa.Column('is_super', sa.Boolean(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        schema='auth',
    )
    op.create_index(op.f('ix_auth_users_email'), 'users', ['email'], unique=True, schema='auth')
    op.create_index(op.f('ix_auth_users_username'), 'users', ['username'], unique=False, schema='auth')
    op.create_table(
        'allowed_device',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('create_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('is_deleted', sa.Boolean(), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('user_agent', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['auth.users.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        sa.UniqueConstraint('user_id', 'user_agent'),
        schema='auth',
    )
    op.create_table(
        'roles_permissions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('create_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('is_deleted', sa.Boolean(), nullable=False),
        sa.Column('perm_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['perm_id'],
            ['auth.permissions.id'],
        ),
        sa.ForeignKeyConstraint(
            ['role_id'],
            ['auth.roles.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        sa.UniqueConstraint('perm_id', 'role_id'),
        schema='auth',
    )
    op.create_table(
        'user_info',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('create_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('is_deleted', sa.Boolean(), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('full_name', sa.String(), nullable=False),
        sa.Column('country', sa.String(), nullable=False),
        sa.Column('gender', sa.String(), nullable=False),
        sa.Column('birthday', sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['auth.users.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        schema='auth',
    )
    op.create_table(
        'users_roles',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('create_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('is_deleted', sa.Boolean(), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('role_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.ForeignKeyConstraint(
            ['role_id'],
            ['auth.roles.id'],
        ),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['auth.users.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        sa.UniqueConstraint('user_id', 'role_id'),
        schema='auth',
    )
    op.create_table(
        'sessions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('create_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
        sa.Column('is_deleted', sa.Boolean(), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('device_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('auth_date', sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ['device_id'],
            ['auth.allowed_device.id'],
        ),
        sa.ForeignKeyConstraint(
            ['user_id'],
            ['auth.users.id'],
        ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('id'),
        schema='auth',
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('sessions', schema='auth')
    op.drop_table('users_roles', schema='auth')
    op.drop_table('user_info', schema='auth')
    op.drop_table('roles_permissions', schema='auth')
    op.drop_table('allowed_device', schema='auth')
    op.drop_index(op.f('ix_auth_users_username'), table_name='users', schema='auth')
    op.drop_index(op.f('ix_auth_users_email'), table_name='users', schema='auth')
    op.drop_table('users', schema='auth')
    op.drop_index(op.f('ix_auth_roles_name'), table_name='roles', schema='auth')
    op.drop_table('roles', schema='auth')
    op.drop_index(op.f('ix_auth_permissions_code'), table_name='permissions', schema='auth')
    op.drop_table('permissions', schema='auth')
    # ### end Alembic commands ###
